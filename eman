#!/bin/bash
#
# Author:   Joshua Chen <iesugrace@gmail.com>
# Date:     2017-06-20 15:52:06
# Location: Zhuhai
# Desc: 这是为教学目的设计的项目，是一个精简版的员工信息管理系统。
#
# 程序功能：
# 
# 通过选单来操作，在主页面提供选项，用户通过选择选项交互式地执行相应的功能。
# 提供这些功能：添加记录，列出所有记录，搜索记录，修改记录，删除记录。
# 员工信息存储在一个文本文件中，这个文本文件就是员工信息数据库。
# 添加记录时，程序依次提示用户输入以下4 个信息：姓名，性别，年龄，电话。
# 一条员工信息一行，字段之间用冒号分隔，附加到数据库文件的尾部。
# 用一个名叫 db 的变量来保存数据库文件的路径，这个变量的值可以是 employee.db。
# 程序退出之前，显示员工记录的总数。
# 源码要有适当的注释。

#
# 脚本所在的目录，可用于后续构建正确无误的路径
#
dir=$(dirname "$0")

#
# 加载库文件。在库文件前面加上脚本所在的目录，这样，即使
# 不在eman 所在的目录执行eman，也能正确找到functions 文件。
#
. $dir/functions

#
# 参数检查
# 如果参数不正确，就输出使用帮助，退出程序，返回1
#
if test $# -ne 1
then
    usage "$0" file >&2
    exit 1
fi

#
# 数据库文件的路径来自第一个命令行参数
#
db=$1

#
# 检查数据库文件
# 如果文件已经存在，但不是常规文件，或不能写，
# 则输出错误信息，退出程序，返回1。
#
if test -e "$db"
then
    if test ! -f "$db" -o ! -w "$db"
    then
        echo "file exists, but not a regular file or not writable." >&2
        exit 1
    fi
fi

#
# 如果数据库文件不存在，就询问用户是否创建，
# 用户确认，就创建一个空文件，否则就退出程序，返回0。
# 如果创建文件失败，就输出错误信息，退出程序，返回1。
#
if test ! -e "$db"
then
    if confirm "$db not exists, create?"
    then
        #
        # 感叹号代表“如果touch 命令失败”
        #
        if ! touch "$db" &>/dev/null
        then
            echo "failed to create $db."
            exit 1
        fi
    else
        exit 0
    fi
fi

#
# 显示头部信息
#
show_header() {
    echo "┌──────────────────────────────────────────┐"
    echo "│                                          │"
    echo "│        EMPLOYEE MANAGEMENT SYSTEM        │"
    echo "│                                          │"
    echo "└──────────────────────────────────────────┘"
    echo
    echo "        1. Add record"
    echo "        2. List all records"
    echo "        3. Search for records"
    echo "        4. Update records"
    echo "        5. Delete records"
    echo
}

#
# 添加一条记录
#
add_one() {
    # 依次提示用户输入姓名，性别，年龄，电话
    read -p " Name: " name
    read -p "  Sex: " sex
    read -p "  Age: " age
    read -p "phone: " phone

    #
    # 输出用户刚刚输入的数据
    #
    echo
    echo "Employee Info:"
    echo
    echo "   Name: $name"
    echo "    Sex: $sex"
    echo "    Age: $age"
    echo "  phone: $phone"
    echo

    #
    # 用户确认才写数据库。
    #
    confirm && echo "$name:$sex:$age:$phone" >> "$db"
}

#
# 搜索记录
#
search() {
    read -p "pattern: " pat
    grep -E "$pat" "$db"
}

#
# 修改一条记录
#
update_one() {
    # 原有的数据
    set -- $(echo "$1" | sed 's/:/ /g')

    # 依次提示用户输入姓名，性别，年龄，电话
    # 把原有的数据一并输出，作为用户的参考
    read -p " Name ($1): " name
    read -p "  Sex ($2): " sex
    read -p "  Age ($3): " age
    read -p "phone ($4): " phone

    #
    # 输出用户刚刚输入的数据
    #
    echo
    echo "Employee Info:"
    echo
    echo "   Name: $name"
    echo "    Sex: $sex"
    echo "    Age: $age"
    echo "  phone: $phone"
    echo

    #
    # 用户确认才写数据库。
    #
    if confirm
    then
        #
        # 删除旧数据，-f 选项表示不确认
        #
        delete_one "$line" -f

        #
        # 添加新数据
        #
        echo "$name:$sex:$age:$phone" >> "$db"
    fi
}

#
# 删除一条记录
#
delete_one() {
    #
    # 避免与外面的tmpfile 冲突
    #
    local tmpfile
    ok=yes

    #
    # 如果第二个参数是 -f，就不问用户确认
    #
    if test "$2" != '-f'
    then
        echo "$1" | replace_colon
        confirm "delete?" && ok=yes || ok=no
    fi

    if test "$ok" = yes
    then
        #
        # 不能直接把grep 命令的结果重定向回 "$db" 文件
        # 否则会使得 "$db" 中所有数据丢失，因此使用临时文件。
        #
        tmpfile=$(mktemp)
        grep -vF "$line" "$db" >$tmpfile
        cp -f $tmpfile "$db"
        rm -f $tmpfile
    fi
}

#
# 把标准输入中的冒号替换成空格
#
replace_colon() {
    sed 's/:/ /g'
}

#
# 退出之前输出记录总数
#
exit_handler() {
    echo
    echo -n "number of records: "
    wc -l < "$db"
    exit
}

#
# 设置信号处理函数
#
trap exit_handler sigint sigquit

#
# 通过一个死循环重复显示主选单，让用户可以重复操作
#
while true
do
    #
    # 清屏
    #
    clear

    #
    # 显示选单
    #
    show_header

    #
    # 获取用户输入，如果用户按下了组合键Ctrl-D，read 命令
    # 将会返回非零。当read 返回非零时，询问用是否退出，
    # 用户如果确认，就退出程序，否则就重新显示选单。
    #
    read -p "select a number: " choice
    if test $? -ne 0
    then
        if confirm "exit?"
        then
            break
        else
            continue
        fi
    fi
    
    case "$choice" in
        # 添加记录
        1)
            #
            # 用一个死循环来实现连续添加多条记录
            #
            while true
            do
                clear
                add_one

                #
                # 用户不确认继续添加时，退出循环
                #
                confirm "add more?" || break
            done
    
            ;;
    
        # 列出所有记录
        2)
            #
            # 用cat 命令读取数据库文件中的内容
            #
            echo
            cat "$db" | \

            #
            # 用空格取代冒号
            #
            replace_colon | \

            #
            # 先按性别排序，再按年龄排序
            #
            sort -k2,2 -k3,3n | \

            #
            # 用column 命令加-t 参数来做美化
            #
            column -t | \
            
            #
            # 用less 分屏显示
            #
            less

            ;;
    
        # 搜索记录
        3)
            tmpfile=$(mktemp)
            search | replace_colon | column -t >$tmpfile
            less < $tmpfile
            rm -f $tmpfile
            ;;
    
        # 修改记录
        4)
            tmpfile=$(mktemp)
            search >$tmpfile
            while read -u3 line
            do
                clear
                update_one "$line"
            done 3<$tmpfile
            rm $tmpfile
            ;;
    
        # 删除记录
        5)
            tmpfile=$(mktemp)
            search >$tmpfile
            while read -u3 line
            do
                delete_one "$line"
            done 3<$tmpfile
            rm $tmpfile
            ;;
    
        *)
            echo "must be a number between 1 and 5"
    esac

    #
    # 暂停程序
    #
    pause

#
# 主选单循环结束
#
done

exit_handler
